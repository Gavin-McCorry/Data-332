?ggplot
?ggplot
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
install.packages("farver")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
Summary(diabetes)
summary(diabetes)
View(diabetes)
data <- diabetes["chol", "weight"]
View(data)
data <- diabetes[chol, weight]
View(data)
data <- diabetes[chol, weight]
ggplot(data = data, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
View(diabetes)
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$height, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol")
?ggplot + ylab("Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weigth + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol)) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
library("faraway")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("faraway")
library("ggplot2")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male", y = "female"), ))
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = 9"female"))
library("cowplot")
library(cowplot)
install.packages("cowplot")
library("cowplot"")
library("cowplot")
library("cowplot")
library("cowplot")
("cowplot")
library("cowplot")
library("ggplot2")
library("faraway")
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = (gender == "female")))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + gempoint()
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_point()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gendere_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = "blue", "Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = c("blue", "Red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red")))
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", fill = (values = c("blue", "red")))
gender_hdl
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ln(0)
mean(y, na.rm = TRUE)
y = c(0, 2, NA, 3, 4, 1, 9, 0)
mean(y, na.rm = TRUE)
x <-1:100; sum(log(x))
set.seed(42)
some_vector = rnorm(100)
?count()
count(some_vector > 1)
sum(some_vector > 1)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
sum_of_squares(x = a)
sum_of_sqaures <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares(x = c(c, d))
sum_of_squares(x = a+b)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff(x = a, y = b)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python}
print("Hello World)
```
```{python}
print("Hello World")
```
print("Hello World)
print("Hello World")
```{python}
print("Hello World")
```{python}
print("Hello World")
```
quit
object_x
# creating random number from Normal PDF
object_x = rnorm(10)
object_x
length(object_x)
sum(object_x)
sum(object_x)
summing.objects.in.R(object_x)
summing.objects.in.R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing.objects.in.R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing_objects_in_R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", round(s, 4))
}
summing_objects_in_R(object_x)
We have created an object named  'object_x', and I want to see the result of this object at the end of this line here : 'r mean(object_x)'
knitr::opts_chunk$set(echo = TRUE)
mean(object_x)
example.data <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/example-data.csv")
View(example.data)
View(example.data)
View(example.data)
Auto <- read.csv("C:/Users/gwmcc/Downloads/Auto.csv")
View(Auto)
knitr::opts_chunk$set(echo = TRUE)
Auto <- read.csv("C:\Users\gwmcc\OneDrive\Desktop\Math 420\Auto.csv")
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
View(Auto)
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
names(Auto)
Auto.rdata = read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
row(Auto)
dim(Auto)
HorsePower <- Auto$horsepower
MilePreGallon <- Auto$mpg
?lm()
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR$coefficients
Model1_SLR
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
View(Model1_SLR)
had(SLR_Dataset, 6)
had(SLR_Dataset)
head(SLR_Dataset)
# ---- Creating a Final Model ----
Model2_SLR <- lm(MilePreGallon ~ HorsePower, data = SLR_Dataset)
Model2_SLR
summary(Model2_SLR)
x = Auto$horsepower
y = Auto$mpg
Model3_SLR <- lm(y ~x)
summary(Model3_SLR)
length(x)
length((y))
names(Model3_SLR)
residuals(Model3_SLR)
plot(Model3_SLR)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages(plotly)
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages("plotly")
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
model_RdTv = lm(Sales ~ Radio + TV, data = Advertising)
# Atomic Vectors
#Example
die <- c(1, 2, 3, 4, 5, 6)
die
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
deck <- read.csv("C:/Users/gwmcc/Downloads/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
knitr::opts_chunk$set(echo = TRUE)
head(deck)
write.csv(deck, file = cards.csv, row.names = FALSE)
write.csv(deck, file = "cards.csv", row.names = FALSE)
head(deck)
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
student_data <- read_xlsx("Students Data HW/Data/Student.xlsx")
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
student_data <- read_xlsx("Students Data HW/Data/Student.xlsx")
registration_data <- read_xlsx("Students Data HW/Data/Registration.xlsx")
course_date <- read_xlsx("Students Data HW/Data/Course.xlsx")
# joining the data
df <- left_join(student_data, registration_data, by = c('Student ID'))
df <- left_join(df, course_date, by = c('Instance ID'))
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
registration_data <- read_xlsx("Students Data HW/Data/Registration.xlsx")
course_date <- read_xlsx("Students Data HW/Data/Course.xlsx")
# joining the data
df <- left_join(student_data, registration_data, by = c('Student ID'))
df <- left_join(df, course_date, by = c('Instance ID'))
df_pivot_payment_plan <- df %>%
group_by(Title, `Payment Plan`) %>%
summarize(count = n(),
total_cost = sum(`Total Cost`, na.rm = TRUE),
total_bal = sum(`Balance Due`, na.rm = TRUE))
ggplot(df_pivot_payment_plan, aes(x = Title, y = total_cost, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Cost") +
ggtitle("Total Cost Vs. Payment Plan") +
geom_text(aes(label = total_cost), vjust = -0.5)
# Total balance due by major segmented by payment plan
ggplot(df_pivot_payment_plan, aes(x = Title, y = total_bal, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Balance")  +
ggtitle("Total Balance Vs. Payment Plan") +
geom_text(aes(label = total_bal), vjust = -0.5)
# Total cost per major segmented by payment plan
ggplot(df_pivot_payment_plan, aes(x = Title, y = total_cost, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Cost") +
ggtitle("Total Cost Vs. Payment Plan") +
geom_text(aes(label = total_cost), vjust = -0.5)
# Total balance due by major segmented by payment plan
ggplot(df_pivot_payment_plan, aes(x = Title, y = total_bal, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Balance")  +
ggtitle("Total Balance Vs. Payment Plan") +
geom_text(aes(label = total_bal), vjust = -0.5)
summarize(count = n())
# Making the pivot table
df_pivot_majors <- df %>%
group_by(Title) %>%
summarize(count = n())
# Chart on the number of majors
ggplot(df_pivot_majors, aes(x = Title, y = count, fill = Title)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Major") +
ylab("Count") +
ggtitle("Count Per Major") +
geom_text(aes(label = total_cost), vjust = -0.5)
# Chart on the number of majors
ggplot(df_pivot_majors, aes(x = Title, y = count, fill = Title)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Major") +
ylab("Count") +
ggtitle("Count Per Major") +
geom_text(aes(label = count), vjust = -0.5)
# Chart on the number of majors
major_count_plot <- ggplot(df_pivot_majors, aes(x = Title, y = count, fill = Title)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Major") +
ylab("Count") +
ggtitle("Count Per Major") +
geom_text(aes(label = count), vjust = -0.5)
major_count_plot
View(major_count_plot)
# Total cost per major segmented by payment plan
cost_pre_major_plot <- ggplot(df_pivot_payment_plan, aes(x = Title, y = total_cost, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Cost") +
ggtitle("Total Cost Vs. Payment Plan") +
geom_text(aes(label = total_cost), vjust = -0.5)
cost_pre_major_plot
# Total balance due by major segmented by payment plan
balance_per_major_plot <- ggplot(df_pivot_payment_plan, aes(x = Title, y = total_bal, fill = `Payment Plan`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Payment Plan") +
ylab("Total Balance")  +
ggtitle("Total Balance Vs. Payment Plan") +
geom_text(aes(label = total_bal), vjust = -0.5)
balance_per_major_plot
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
library(lubridate)
View(df)
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
library(dplyr)
library(dplyr)
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(lubridate)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(lubridate)
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
# Chart by birth year for students
birth_year_count_plot <- ggplot(df_pivot_birth_dates, aes(x = `Birth Date`, y = count, fill = `Birth Date`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Birth Year") +
ylab("Total Cost") +
ggtitle("Count Per Birth Year") +
geom_text(aes(label = count), vjust = -0.5)
birth_year_count_plot
# Chart by birth year for students
ggplot(df_pivot_birth_dates, aes(x = `Birth Date`, y = count, fill = `Birth Date`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Birth Year") +
ylab("Total Cost") +
ggtitle("Count Per Birth Year") +
geom_text(aes(label = count), vjust = -0.5)
df_pivot_birth_dates <- df %>%
group_by(lubridate::year(`Birth Date`)) %>%
summarize(count = n())
View(birth_year_count_plot)
View(df_pivot_birth_dates)
View(df)
# Chart by birth year for students
ggplot(df_pivot_birth_dates, aes(x = `Birth Date`, y = count, fill = `Birth Date`)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Birth Year") +
ylab("Total Cost") +
ggtitle("Count Per Birth Year") +
geom_text(aes(label = count), vjust = -0.5)
df_pivot_birth_dates <- df %>%
group_by(year = lubridate::year(`Birth Date`)) %>%
summarize(count = n())
# Chart by birth year for students
ggplot(df_pivot_birth_dates, aes(x = year, y = count, fill = year)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Birth Year") +
ylab("Total Cost") +
ggtitle("Count Per Birth Year") +
geom_text(aes(label = count), vjust = -0.5)
View(df_pivot_birth_dates)
# Chart by birth year for students
birth_year_count_plot <- ggplot(df_pivot_birth_dates, aes(x = year, y = count, fill = year)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)) +
xlab("Birth Year") +
ylab("Total Cost") +
ggtitle("Count Per Birth Year") +
geom_text(aes(label = count), vjust = -0.5)
birth_year_count_plot
major_count_plot
ggsave('major_count_plot.pdf')
birth_year_count_plot
ggsave('birth_year_count_plot.pdf')
cost_pre_major_plot
ggsave('cost_pre_major_plot')
ggsave('cost_pre_major_plot.pdf')
balance_per_major_plot
ggsave('balance_per_major_plot.pdf')
major_count_plot
ggsave('major_count_plot.png')
birth_year_count_plot
ggsave('birth_year_count_plot.png')
cost_pre_major_plot
ggsave('cost_pre_major_plot.png')
balance_per_major_plot
ggsave('balance_per_major_plot.png')
ggsave('balance_per_major_plot.png', height = 4.5)
balance_per_major_plot
ggsave('balance_per_major_plot.png')
major_count_plot
ggsave('major_count_plot.png', height = 4.5)
major_count_plot
ggsave('major_count_plot.png', height = 5)
ggsave('major_count_plot.png', height = 4)
ggsave('major_count_plot.png', height = 4.5)
ggsave('major_count_plot.png', height = 4.75)
ggsave('major_count_plot.png', height = 5)
birth_year_count_plot
ggsave('birth_year_count_plot.png', height = 5)
