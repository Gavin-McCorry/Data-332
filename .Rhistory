data <- diabetes["chol", "weight"]
View(data)
data <- diabetes[chol, weight]
View(data)
data <- diabetes[chol, weight]
ggplot(data = data, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
View(diabetes)
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$height, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol")
?ggplot + ylab("Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weigth + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol)) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
library("faraway")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("faraway")
library("ggplot2")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male", y = "female"), ))
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = 9"female"))
library("cowplot")
library(cowplot)
install.packages("cowplot")
library("cowplot"")
library("cowplot")
library("cowplot")
library("cowplot")
("cowplot")
library("cowplot")
library("ggplot2")
library("faraway")
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = (gender == "female")))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + gempoint()
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_point()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gendere_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = "blue", "Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = c("blue", "Red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red")))
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", fill = (values = c("blue", "red")))
gender_hdl
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ln(0)
mean(y, na.rm = TRUE)
y = c(0, 2, NA, 3, 4, 1, 9, 0)
mean(y, na.rm = TRUE)
x <-1:100; sum(log(x))
set.seed(42)
some_vector = rnorm(100)
?count()
count(some_vector > 1)
sum(some_vector > 1)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
sum_of_squares(x = a)
sum_of_sqaures <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares(x = c(c, d))
sum_of_squares(x = a+b)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff(x = a, y = b)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python}
print("Hello World)
```
```{python}
print("Hello World")
```
print("Hello World)
print("Hello World")
```{python}
print("Hello World")
```{python}
print("Hello World")
```
quit
object_x
# creating random number from Normal PDF
object_x = rnorm(10)
object_x
length(object_x)
sum(object_x)
sum(object_x)
summing.objects.in.R(object_x)
summing.objects.in.R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing.objects.in.R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing_objects_in_R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", round(s, 4))
}
summing_objects_in_R(object_x)
We have created an object named  'object_x', and I want to see the result of this object at the end of this line here : 'r mean(object_x)'
knitr::opts_chunk$set(echo = TRUE)
mean(object_x)
example.data <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/example-data.csv")
View(example.data)
View(example.data)
View(example.data)
Auto <- read.csv("C:/Users/gwmcc/Downloads/Auto.csv")
View(Auto)
knitr::opts_chunk$set(echo = TRUE)
Auto <- read.csv("C:\Users\gwmcc\OneDrive\Desktop\Math 420\Auto.csv")
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
View(Auto)
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
names(Auto)
Auto.rdata = read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
row(Auto)
dim(Auto)
HorsePower <- Auto$horsepower
MilePreGallon <- Auto$mpg
?lm()
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR$coefficients
Model1_SLR
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
View(Model1_SLR)
had(SLR_Dataset, 6)
had(SLR_Dataset)
head(SLR_Dataset)
# ---- Creating a Final Model ----
Model2_SLR <- lm(MilePreGallon ~ HorsePower, data = SLR_Dataset)
Model2_SLR
summary(Model2_SLR)
x = Auto$horsepower
y = Auto$mpg
Model3_SLR <- lm(y ~x)
summary(Model3_SLR)
length(x)
length((y))
names(Model3_SLR)
residuals(Model3_SLR)
plot(Model3_SLR)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages(plotly)
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages("plotly")
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
model_RdTv = lm(Sales ~ Radio + TV, data = Advertising)
# Atomic Vectors
#Example
die <- c(1, 2, 3, 4, 5, 6)
die
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
deck <- read.csv("C:/Users/gwmcc/Downloads/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
knitr::opts_chunk$set(echo = TRUE)
head(deck)
write.csv(deck, file = cards.csv, row.names = FALSE)
write.csv(deck, file = "cards.csv", row.names = FALSE)
head(deck)
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
View(df_truck)
library(readxl)
library(readxl)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
rm(list = ls())
# setting up working directory
setwd('C:/Users/johnbrosius.AUGIENT/Documents/r programming/in class tutorial')
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
# clears environment on run
rm(list = ls())
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
# clears environment on run
rm(list = ls())
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
# clears environment on run
rm(list = ls())
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
# clears environment on run
rm(list = ls())
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
# selecting columns
df  <- df_truck[, c(4:15)]
# deselect columns
df <- subset(df, select = -c(...10))
#getting difference in days within a column
date_min <- min(df$Date)
date_max <- max(df$Date)
number_of_days_on_the_road <- date_max - date_min
print(number_of_days_on_the_road)
days <- difftime(max(df$Date), min(df$Date))
print(days)
number_of_days_recorded <- nrow(df)
total_hours <- sum(df$Hours)
avg_hrs_per_day_rec <- round(total_hours / number_of_days_recorded, digits = 3)
print(avg_hrs_per_day_rec)
df$fuel_cost <- df$Gallons * df$Price.per.Gallon
df[c('warehouse', 'starting_city_state')] <-
str_split_fixed(df$Starting.Location, ',', 2)
df$starting_city_state <- gsub(',', "", df$starting_city_state)
# df[c('col1', 'col2')] <-
#   str_split_fixed(df$city_state, ' ', 2)
df_starting_pivot <- df %>%
group_by(starting_city_state) %>%
summarize(count = n(),
mean_size_hours = mean(Hours, na.rm = TRUE),
sd_hours = sd(Hours, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_gallons = sum(Gallons, na.rm = TRUE)
)
ggplot(df_starting_pivot, aes(x = starting_city_state, y = count)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
View(df)
## Summary Questions:
# 1) Days of Driving
days_of_driving = sum(df$Hours) / 24
View(df)
date = df$Date[1]
date = df$Date[0:]
date = df$Date
date = df$Date[1]
date = df$Date[:]
date = last(df$Date)
date = first(df$Date)
## Summary Questions:
# 1) Days of Driving
days_of_driving = last(df$Date) - first(df$Date)
# 2) Hours of Driving
hours_of_driving = sum(df$Hours)
# 3) Average hours per day
average_hours_per_day = hours_of_driving / days_of_driving
## Summary Questions:
# 1) Days of Driving
days_of_driving = last(df$Date) - first(df$Date)
## Summary Questions:
# 1) Days of Driving
days_of_driving = as.numeric(last(df$Date) - first(df$Date))
# 2) Hours of Driving
hours_of_driving = sum(df$Hours)
# 3) Average hours per day
average_hours_per_day = hours_of_driving / days_of_driving
# 4) Total Expenses
total_expenses = sum(df$fuel_cost)
# 5) Total fuel expenses
total_fuel_expenses = sum(df$fuel_cost)
View(df)
# 4) Total Expenses
total_expenses = sum(df$fuel_cost) + sum(df$Tolls) + sum(df$Misc)
View(df)
df_starting_pivot <- df %>%
group_by(starting_city_state) %>%
summarize(count = n(),
mean_size_hours = mean(Hours, na.rm = TRUE),
sd_hours = sd(Hours, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_gallons = sum(Gallons, na.rm = TRUE)
)
ggplot(df_starting_pivot, aes(x = starting_city_state, y = count)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
View(df)
View(df)
# 6) Other Expenses
other_expenses = sum(df$Misc) + sum(df$Tolls)
# 7) Total Gallons Consumed
total_gallons = sum(df$Gallons)
# 8) Total miles driven
total_miles_driven = sum(df$Odometer.Beginning) - sum(df$Odometer.Ending)
# 8) Total miles driven
total_miles_driven = sum(df$Odometer.Ending) - sum(df$Odometer.Beginning)
# 9) Miles peer gallon
miles_pe_gallon = total_miles_driven / total_gallons
# 9) Miles peer gallon
miles_pe_gallon = round(total_miles_driven / total_gallons, 3)
# 10) Total Cost per Mile
total_cost_peer_mile = total_expenses / total_miles_driven
df[c('Store', 'delivery_city_state')] <-
str_split_fixed(df$Delivery.Location, ', ', 2)
df_delivery_pivot <- df %>%
group_by(delivery_city_state) %>%
summarize(count = n(),
mean_size_hours = mean(Hours, na.rm = TRUE),
sd_hours = sd(Hours, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_gallons = sum(Gallons, na.rm = TRUE)
)
View(df)
View(df_delivery_pivot)
View(df_starting_pivot)
View(df_starting_pivot)
df$delivery_city_state <- gsub(',', "", df$delivery_city_state)
df_delivery_pivot <- df %>%
group_by(delivery_city_state) %>%
summarize(count = n(),
mean_size_hours = mean(Hours, na.rm = TRUE),
sd_hours = sd(Hours, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_gallons = sum(Gallons, na.rm = TRUE)
)
View(df_delivery_pivot)
View(df_starting_pivot)
View(df_delivery_pivot)
ggplot(df_delivery_pivot, aes(x = delivery_city_state, y = count()) +
geom_col() +
theme(axis.text = element_text(angle = 45), vjust = .5, hjust = 1))
rlang::last_trace()
ggplot(df_delivery_pivot, aes(x = delivery_city_state, y = count) +
geom_col() +
theme(axis.text = element_text(angle = 45), vjust = .5, hjust = 1))
df_delivery_pivot <- df %>%
group_by(delivery_city_state) %>%
summarize(count = n(),
mean_size_hours = mean(Hours, na.rm = TRUE),
sd_hours = sd(Hours, na.rm = TRUE),
total_hours = sum(Hours, na.rm = TRUE),
total_gallons = sum(Gallons, na.rm = TRUE)
)
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1)
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
ggplot(df_delivery_pivot, aes(x = delivery_city_state, y = count)) +
geom_col() +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
library(readxl)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
# clears environment on run
rm(list = ls())
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
df_truck <- read_excel('In-Class-Examples/Data/NP_EX_1-2.xlsx', sheet = 2, skip = 3, .name_repair = 'universal')
