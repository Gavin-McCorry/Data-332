library("geom_point")
library("ggplot2")
ggplot2(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
?ggplot2
library("ggplot")
?ggplot
?ggplot
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
install.packages("farver")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
Summary(diabetes)
summary(diabetes)
View(diabetes)
data <- diabetes["chol", "weight"]
View(data)
data <- diabetes[chol, weight]
View(data)
data <- diabetes[chol, weight]
ggplot(data = data, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
View(diabetes)
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$height, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol")
?ggplot + ylab("Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weigth + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol)) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
library("faraway")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("faraway")
library("ggplot2")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male", y = "female"), ))
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = 9"female"))
library("cowplot")
library(cowplot)
install.packages("cowplot")
library("cowplot"")
library("cowplot")
library("cowplot")
library("cowplot")
("cowplot")
library("cowplot")
library("ggplot2")
library("faraway")
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = (gender == "female")))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + gempoint()
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_point()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gendere_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = "blue", "Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = c("blue", "Red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red")))
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", fill = (values = c("blue", "red")))
gender_hdl
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ln(0)
mean(y, na.rm = TRUE)
y = c(0, 2, NA, 3, 4, 1, 9, 0)
mean(y, na.rm = TRUE)
x <-1:100; sum(log(x))
set.seed(42)
some_vector = rnorm(100)
?count()
count(some_vector > 1)
sum(some_vector > 1)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
sum_of_squares(x = a)
sum_of_sqaures <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares(x = c(c, d))
sum_of_squares(x = a+b)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff(x = a, y = b)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python}
print("Hello World)
```
```{python}
print("Hello World")
```
print("Hello World)
print("Hello World")
```{python}
print("Hello World")
```{python}
print("Hello World")
```
quit
object_x
# creating random number from Normal PDF
object_x = rnorm(10)
object_x
length(object_x)
sum(object_x)
sum(object_x)
summing.objects.in.R(object_x)
summing.objects.in.R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing.objects.in.R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing_objects_in_R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", round(s, 4))
}
summing_objects_in_R(object_x)
We have created an object named  'object_x', and I want to see the result of this object at the end of this line here : 'r mean(object_x)'
knitr::opts_chunk$set(echo = TRUE)
mean(object_x)
example.data <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/example-data.csv")
View(example.data)
View(example.data)
View(example.data)
Auto <- read.csv("C:/Users/gwmcc/Downloads/Auto.csv")
View(Auto)
knitr::opts_chunk$set(echo = TRUE)
Auto <- read.csv("C:\Users\gwmcc\OneDrive\Desktop\Math 420\Auto.csv")
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
View(Auto)
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
names(Auto)
Auto.rdata = read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
row(Auto)
dim(Auto)
HorsePower <- Auto$horsepower
MilePreGallon <- Auto$mpg
?lm()
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR$coefficients
Model1_SLR
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
View(Model1_SLR)
had(SLR_Dataset, 6)
had(SLR_Dataset)
head(SLR_Dataset)
# ---- Creating a Final Model ----
Model2_SLR <- lm(MilePreGallon ~ HorsePower, data = SLR_Dataset)
Model2_SLR
summary(Model2_SLR)
x = Auto$horsepower
y = Auto$mpg
Model3_SLR <- lm(y ~x)
summary(Model3_SLR)
length(x)
length((y))
names(Model3_SLR)
residuals(Model3_SLR)
plot(Model3_SLR)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages(plotly)
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages("plotly")
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
model_RdTv = lm(Sales ~ Radio + TV, data = Advertising)
# Atomic Vectors
#Example
die <- c(1, 2, 3, 4, 5, 6)
die
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
deck <- read.csv("C:/Users/gwmcc/Downloads/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
knitr::opts_chunk$set(echo = TRUE)
head(deck)
write.csv(deck, file = cards.csv, row.names = FALSE)
write.csv(deck, file = "cards.csv", row.names = FALSE)
head(deck)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
dim(Default)
head(Default)
set.seed(80023)
num_obs = lngth(Default$default)
num_obs = length(Default$default)
default_id = sampl(nrow(Default), trunc(num_obs * .6))
default_id = sample(nrow(Default), trunc(num_obs * .6))
head(default_id)
set.seed(80023)
num_obs = length(Default$default)
default_id = sample(nrow(Default), trunc(num_obs * .6))
head(default_id)
default_train = Default[default_id, ]
View(default_train)
default_test = Default[-default_id, ]
View(default_test)
View(default_train)
View(default_test)
head(Default)
View(default_test)
View(default_train)
View(default_test)
train_data.frame = data.frame(y.trn, x.trn)
y.trn = default_train$default
x.trn = default_train$balance
train_data.frame = data.frame(y.trn, x.trn)
View(train_data.frame)
logit.model.1_trn = glm(formula = y.trn ~ x.trn,
data = train_data.frame,
family = binomial(link = "logit"))
View(logit.model.1_trn)
summary(logit.model.1_trn)
library(equatiomatic)
equatiomatic::extract_eq(logit.model.1_trn)
?extract_eq()
equatiomatic::extract_eq(logit.model.1_trn,
data = train_data.frame,
coef_digits = 5)
equatiomatic::extract_eq(logit.model.1_trn,
data = train_data.frame,
coef_digits = 5,
use_coefs = TRUE)
?predict()
head(actual)
actual = default_test$default
head(actual)
predicted = ifelse(predict(logit.model.1_trn) > 0, "Yes", "No")
predicted
error_funciton = function(actual, predicted){
mean(actual != predicted)
}
error_funciton(actual, predicted)
error = error_funciton(actual, predicted)
error
accuracy_of_function = 1 - error
accuracy_of_function
error = error_funciton(actual, predicted)
set.seed(80023)
num_obs = length(Default$default)
default_id = sample(nrow(Default), trunc(num_obs * .6))
head(default_id)
default_train = Default[default_id, ]
default_test = Default[-default_id, ]
y.trn = default_train$default
x.trn = default_train$balance
train_data.frame = data.frame(y.trn, x.trn)
logit.model.1_trn = glm(formula = y.trn ~ x.trn,
data = train_data.frame,
family = binomial(link = "logit"))
summary(logit.model.1_trn)
accuracy_of_function
predicted = predicted[1000, 5000]
predicted = predicted[1000: 5000]
error_funciton = function(actual, predicted){
mean(actual != predicted)
}
error = error_funciton(actual, predicted)
error
accuracy_of_function = 1 - error
accuracy_of_function
predicted = ifelse(predict(logit.model.1_trn) > 0, "Yes", "No")
library(caret)
install.packages('caret')
library(caret)
library(caret)
train_table = table(Predicted = predictede, Actual = y.trn)
train_table = table(Predicted = predicted, Actual = y.trn)
trin_confusion_matrix = confusionMatrix(train_table, positive = "Yes")
library(ggplot2)
library(lattice)
train_confusion_matrix = confusionMatrix(train_table, positive = "Yes")
train_confusion_matrix
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(lubridate)
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data", sheet = "abur")
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data", sheet = "abur")
kelp_data <- read_xlsx("/In-Class-Examples/Kelp_fronds Example/Data", sheet = "abur")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data", sheet = "abur")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data/kelp_fronds.xlsx", sheet = "abur")
fish_data <- read.csv("In-Class_Examples/Kelp_fronds Example/Data/fish.csv")
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data/kelp_fronds.xlsx", sheet = "abur")
fish_data <- read.csv("In-Class_Examples/Kelp_fronds Example/Data/fish.csv")
fish_data <- read.csv("In-Class-Examples/Kelp_fronds Example/Data/fish.csv")
fish_data <- read.csv("In-Class-Examples/Kelp_fronds Example/Data/fish.csv")
kelp_data <- read_xlsx("In-Class-Examples/Kelp_fronds Example/Data/kelp_fronds.xlsx", sheet = "abur")
# Making fish table
fish_garibaldi <- fish%>%
filter(common_name = "garibaldi")
# Making fish table
fish_garibaldi <- fish%>%
filter(common_name = "garibaldi")
# Making fish table
fish_garibaldi <- fish_data%>%
filter(common_name = "garibaldi")
# Making fish table
fish_garibaldi <- fish_data%>%
filter(common_name == "garibaldi")
View(fish_garibaldi)
fish_mohk <- fish_data%>%
filter(common_name == "mohk")
fish_mohk <- fish_data%>%
filter(common_name == "mohk")
View(fish_mohk)
# Making fish table
fish_garibaldi <- fish_data%>%
filter(common_name == "garibaldi")
fish_mohk <- fish_data%>%
filter(common_name == "mohk")
View(fish_data)
View(fish_data)
View(kelp_data)
View(fish_data)
fish_mohk <- fish_data%>%
filter(site == "mohk")
fish_over50 <- fish_data %>%
filter(total_count >= 50)
fish_3sp <- fish_data %>%
filter(common_name == "garbaldi" |
common_name == "blacksmith" |
common_name == "black surfperch")
View(fish_3sp)
View(fish_data)
View(kelp_data)
View(fish_data)
View(kelp_data)
fish_3sp2 <- fish_data %>%
filter(common_name in c("garbaldi", "blacksmith", "black surfperch"))
fish_3sp2 <- fish_data %>%
filter(common_name %in% c("garbaldi", "blacksmith", "black surfperch"))
black_fish <- fish_data %>%
filter(common_name, like = "black")
black_fish <- fish_data %>%
filter(common_name, like == "black")
black_fish <- fish_data %>%
filter(common_name, %like% "black")
black_fish <- fish_data %>%
filter(common_name %like% "black")
black_fish <- fish_data %>%
filter(common_name %like% "black")
black_fish <- fish_data %>%
filter(common_name %like% "black", )
black_fish <- fish_data %>%
filter(common_name,  %like% "black")
black_fish <- fish_data %>%
filter(common_name, %like% "black")
## Not working lol
black_fish <- fish_data %>%
filter(grepl("black", common_name))
View(black_fish)
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332")
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Patient Billing Data HW")
billing <- read_xlsx("Data/Billing.xlsx")
patients <- read_xlsx("Data/Patient.xlsx")
visit <- read_xlsx("Data/Visit.xlsx")
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(lubridate)
## Setting up working directory
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Patient Billing Data HW")
billing <- read_xlsx("Data/Billing.xlsx")
patients <- read_xlsx("Data/Patient.xlsx")
visit <- read_xlsx("Data/Visit.xlsx")
View(visit)
df <- left_join(visit, patients, "VisitID")
df <- left_join(visit, patients, VisitID)
df <- left_join(visit, patients, 'VisitID')
View(patients)
df <- left_join(visit, patients, "PatientID")
View(df)
df <- left_join(df, billing, "VisitID")
View(df)
View(df)
View(df)
View(df)
df_pivot_reason <- df%>%
group_by(Reason) %>%
summarize(count = n())
View(df_pivot_reason)
