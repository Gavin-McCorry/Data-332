names(df_6)[names(df_6) == "Speed"] <- "MPH"
names(df_6)[names(df_6) == "Orange.Light"] <- "Flashing.Light"
names(df_6)[names(df_6) == "Name"] <- "Collector.Name"
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
names(df_8)[names(df_8) == "Time.of.Day"] <- "Time"
names(df_8)[names(df_8) == "Type.of.Car"] <- "Vehicle.Type"
names(df_8)[names(df_8) == "Speed..mph."] <- "MPH"
names(df_8)[names(df_8) == "Name"] <- "Collector.Name"
names(df_8)[names(df_8) == "Weather"] <- "Temperature"
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_full_car_data)
#df 8
df_8[1] <- NULL
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_full_car_data)
#df 6
names(df_6)[names(df_6) == "Speed"] <- "MPH"
names(df_3)[names(df_3) == "Speed.MPH"] <- "MPH"
#df 2
names(df_2)[names(df_2) == "Speed"] <- "MPH"
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_1)
View(df_2)
View(df_3)
View(df_4)
View(df_5)
View(df_6)
View(df_7)
View(df_8)
View(df_1)
names(df_1)[names(df_1) == "Speed"] <- "MPH"
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_full_car_data)
View(df_8)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp('~/GitHub/Data-332/Counting_Cars_IRL_App')
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
Combined_Car_Data <- readRDS("~/GitHub/Data-332/Counting_Cars_IRL_App/Combined_Car_Data.rds")
View(df_full_car_data)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
runApp()
View(Combined_Car_Data)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
runApp()
View(df_full_car_data)
# Making Data the same
df_full_car_data$Weather <- tolower(df_full_car_data$Weather)
df_full_car_data$Vehicle.Color <- tolower(df_full_car_data$Vehicle.Color)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp()
df_full_car_data$Weather <- trimws(df_full_car_data$Weather)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp()
df_full_car_data$Vehicle.Color <- trimws(df_full_car_data$Vehicle.Color)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "grey", x)
}
install.packages("stringdist")
runApp()
library(stringdist)
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "grey", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "gray", method = "lv") <= 2, "grey", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("lubridate")
install.packages("lubridate")
View(df_8)
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
# making anyy time that doesnt have AM or Pm either Am or Pm dpending on if it is erlier or later then 9:00
add_am_pm_indicator <- function(time_str) {
# Parse time string
time <- parse_time(time_str)
# Define cutoff time
cutoff_time <- as.POSIXct("09:00", format = "%H:%M")
# Determine AM/PM based on cutoff time
if (time < cutoff_time) {
formatted_time <- format(time, "%I:%M %p")
} else {
formatted_time <- format(time, "%I:%M %p", pm = TRUE)
}
return(formatted_time)
}
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
library(lubridate)
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
# making anyy time that doesnt have AM or Pm either Am or Pm dpending on if it is erlier or later then 9:00
add_am_pm_indicator <- function(time_str) {
# Parse time string
time <- parse_time(time_str)
# Define cutoff time
cutoff_time <- as.POSIXct("09:00", format = "%H:%M")
# Determine AM/PM based on cutoff time
if (time < cutoff_time) {
formatted_time <- format(time, "%I:%M %p")
} else {
formatted_time <- format(time, "%I:%M %p", pm = TRUE)
}
return(formatted_time)
}
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
# making anyy time that doesnt have AM or Pm either Am or Pm dpending on if it is erlier or later then 9:00
add_am_pm_indicator <- function(time_str) {
# Parse time string
time <- hms(time_str)
# Define cutoff time
cutoff_time <- as.POSIXct("09:00", format = "%H:%M")
# Determine AM/PM based on cutoff time
if (time < cutoff_time) {
formatted_time <- format(time, "%I:%M %p")
} else {
formatted_time <- format(time, "%I:%M %p", pm = TRUE)
}
return(formatted_time)
}
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
shiny::runApp()
runApp()
runApp()
View(Combined_Car_Data)
runApp()
runApp()
runApp()
runApp()
df <- readRDS("Combined_Car_Data.rds")
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
install.packages("cron")
install.packages("chron")
library(chron)
add_am_pm_indicator <- function(time_str) {
# Parse time string using chron::times
time <- times(time_str)
# Define cutoff time as 9:00 AM
cutoff_time <- times("09:00:00")
# Determine AM/PM based on cutoff time
if (time < cutoff_time) {
formatted_time <- paste(format(time, "%I:%M"), "AM")
} else {
formatted_time <- paste(format(time, "%I:%M"), "PM")
}
return(formatted_time)
}
# Apply add_am_pm_indicator function to the Time column in df_6
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
add_am_pm_indicator <- function(time_str) {
# Define cutoff time as 9:00 AM
cutoff_time <- times("09:00:00")
# Determine AM/PM based on cutoff time
if (time_str < cutoff_time) {
formatted_time <- paste(format(time, "%I:%M"), "AM")
} else {
formatted_time <- paste(format(time, "%I:%M"), "PM")
}
return(formatted_time)
}
# Apply add_am_pm_indicator function to the Time column in df_6
df_6$Time <- sapply(df_6$Time, add_am_pm_indicator)
convert_time_format <- function(time_str) {
# Split time into hours and minutes
time_components <- strsplit(time_str, ":")[[1]]
hour <- as.integer(time_components[1])
minute <- as.integer(time_components[2])
# Define cutoff hour
cutoff_hour <- 9
# Determine whether to convert to AM or PM
if (hour < cutoff_hour) {
# Convert to PM if hour is before the cutoff
formatted_time <- sprintf("%d:%02d PM", hour, minute)
} else {
# Convert to AM if hour is after the cutoff
formatted_time <- sprintf("%d:%02d AM", hour, minute)
}
return(formatted_time)
}
# Apply add_am_pm_indicator function to the Time column in df_6
df_6$Time <- sapply(df_6$Time, convert_time_format)
View(df_6)
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App/New Data")
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
View(df_7)
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
View(df_7)
convert_time_format <- function(time_str) {
# Check if the time_str includes AM or PM
if (grepl("[AP]M$", time_str, ignore.case = TRUE)) {
# Extract hour and minute from time string with AM/PM
time_components <- unlist(strsplit(time_str, ":|\\s+"))
hour <- as.integer(time_components[1])
minute <- as.integer(time_components[2])
am_pm <- time_components[3]
# Determine the cutoff hour based on AM/PM
if (am_pm == "AM" && hour >= 9) {
formatted_time <- sprintf("%d:%02d PM", hour, minute)
} else if (am_pm == "PM" && hour < 9) {
formatted_time <- sprintf("%d:%02d AM", hour, minute)
} else {
formatted_time <- time_str
}
} else {
# Convert time without AM/PM to the desired format
time_components <- unlist(strsplit(time_str, ":"))
hour <- as.integer(time_components[1])
minute <- as.integer(time_components[2])
# Define cutoff hour
cutoff_hour <- 9
# Determine whether to convert to AM or PM
if (hour < cutoff_hour) {
# Convert to PM if hour is before the cutoff
formatted_time <- sprintf("%d:%02d PM", hour, minute)
} else {
# Convert to AM if hour is after the cutoff
formatted_time <- sprintf("%d:%02d AM", hour, minute)
}
}
return(formatted_time)
}
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(plyr)
library(chron)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_full_car_data)
# Making Data the same
df_full_car_data$Weather <- tolower(df_full_car_data$Weather)
df_full_car_data$Weather <- trimws(df_full_car_data$Weather)
df_full_car_data$Vehicle.Color <- tolower(df_full_car_data$Vehicle.Color)
df_full_car_data$Vehicle.Color <- trimws(df_full_car_data$Vehicle.Color)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "gray", method = "lv") <= 2, "graey", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(plyr)
library(chron)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(plyr)
library(chron)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
library(stringdist)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
View(df_full_car_data)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data_1.rds")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data_1.rds")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data_1.rds")
runApp()
View(df_full_car_data)
View(df_7)
View(df_6)
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
# Fix times that dont have Am or PM
convert_time_format <- function(time_str) {
# Check if the time_str includes AM or PM
if (grepl("[AP]M$", time_str, ignore.case = TRUE)) {
# Extract hour and minute from time string with AM/PM
time_components <- unlist(strsplit(time_str, ":|\\s+"))
hour <- as.integer(time_components[1])
minute <- as.integer(time_components[2])
am_pm <- time_components[3]
# Determine the cutoff hour based on AM/PM
if (am_pm == "AM" && hour >= 9) {
formatted_time <- sprintf("%d:%02d PM", hour, minute)
} else if (am_pm == "PM" && hour < 9) {
formatted_time <- sprintf("%d:%02d AM", hour, minute)
} else {
formatted_time <- time_str
}
} else {
# Convert time without AM/PM to the desired format
time_components <- unlist(strsplit(time_str, ":"))
hour <- as.integer(time_components[1])
minute <- as.integer(time_components[2])
# Define cutoff hour
cutoff_hour <- 9
# Determine whether to convert to AM or PM
if (hour < cutoff_hour) {
# Convert to PM if hour is before the cutoff
formatted_time <- sprintf("%d:%02d PM", hour, minute)
} else {
# Convert to AM if hour is after the cutoff
formatted_time <- sprintf("%d:%02d AM", hour, minute)
}
}
return(formatted_time)
}
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
View(df_7)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App/New Data")
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
View(df_7)
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
View(df_7)
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
df_7 <- read.csv("Speed analyst 332 Car Data.csv")
View(df_7)
names(df_7)[names(df_7) == "Student"] <- "Collector.Name"
names(df_7)[names(df_7) == "Time.of.Day"] <- "Time"
names(df_7)[names(df_7) == "Type.of.se"] <- "Vehicle.Type"
names(df_7)[names(df_7) == "Orange.Light"] <- "Flashing.Light"
df_7$Time <- sapply(df_7$Time, convert_time_format)
View(df_7)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Making Data the same
df_full_car_data$Weather <- tolower(df_full_car_data$Weather)
df_full_car_data$Weather <- trimws(df_full_car_data$Weather)
df_full_car_data$Vehicle.Color <- tolower(df_full_car_data$Vehicle.Color)
df_full_car_data$Vehicle.Color <- trimws(df_full_car_data$Vehicle.Color)
# Making all car color spelings the same
correct_color <- function(x) {
ifelse(stringdist(tolower(x), "grey", method = "lv") <= 2, "gray", x)
}
df_full_car_data$Vehicle.Color <- sapply(df_full_car_data$Vehicle.Color, correct_color)
View(df_full_car_data)
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data_1.rds")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Counting_Cars_IRL_App")
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data_1.rds")
runApp()
# Saving new df
saveRDS(df_full_car_data, file = "Combined_Car_Data.rds")
runApp()
View(df_full_car_data)
View(df_full_car_data)
View(df_8)
View(df_7)
View(df_6)
View(df_5)
names(df_5)[names(df_5) == "Week.Day"] <- "Day"
View(df_5)
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# Making Data the same
df_full_car_data$Weather <- tolower(df_full_car_data$Weather)
df_full_car_data$Weather <- trimws(df_full_car_data$Weather)
df_full_car_data$Vehicle.Color <- tolower(df_full_car_data$Vehicle.Color)
df_full_car_data$Vehicle.Color <- trimws(df_full_car_data$Vehicle.Color)
View(df_full_car_data)
View(df_5)
View(df_4)
View(df_3)
View(df)
View(df_1)
View(df)
View(df_1)
View(df_2)
View(df_3)
View(df_4)
View(df_5)
View(df_6)
View(df_7)
View(df_8)
names(df_5)[names(df_5) == "Day"] <- "Week.Day"
# Merging all data frames into one
df_full_car_data <- rbind.fill(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
View(df_full_car_data)
View(df_full_car_data)
runApp()
runApp()
