title: "First R Markdown"
---
title: "First R Markdown"
install.packages("qcc")
install.packages("cex")
pnorm(60, mean = 75, sd = 8, lower.tail = TRUE)
pnrom(97.4, mean = 75, sd = 8)
pnorm(97.4, mean = 75, sd = 8)
pnorm(97.4, mean = 75, sd = 8, lower.tail = T)
pnorm(97.4, mean = 75, sd = 8, lower.tail = F)
cdf(20,3)
20C3
20*19*18
20*17*15
190*8
4*6*5
10*10*10*26*26*26
62^6
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(knitr)
FinishTime <- c(261,271,236,244,279,296,284,299,288,288,247,256,338,
360,341,333,261,266,287,296,313,311,307,307,299,303,
277,283,304,305,288,290,288,289,297,299,332,330,309,
328,307,328,285,291,295,298,306,315,310,318,318,320,
333,321,323,324,327)
minimum <- min(FinishTime)
maximum <- max(FinishTime)
minimum
maximum
numOfClasses = ceiling(sqrt(length( FinishTime)))
numOfClasses
classWidth = ceiling((maximum - minimum) / numOfClasses)
classWidth
classBreaks = seq(from = minimum, to = maximum + classWidth, by = classWidth)
classLimits = cut(FinishTime, breaks = classBreaks)
frequencyTable = as.data.frame(transform(table(classLimits)))
frequencyTable
kable(frequencyTable, align = "c", caption = "Frequency table for FinishTime")
histogramofFinishTime <- hist(FinishTime, breaks = numOfClasses, xlab = "FinishTime", ylab = "Frequency", main = "Histogram of FinishTime")
library(readxl)
library(knitr)
salaries <- c(24,25,25,27,27,29,30,35,35,35,36,38,38,39,39,40,40,40,45,45,45,
45,47,52,52,52,58,59,59,61,61,67,68,68,68,250)
minimum <- min(salaries)
maximum <- max(salaries)
numberOfClasses = ceiling(sqrt(length(salaries)))
classWidth = ceiling((maximum - minimum) / numberOfClasses)
classBreaks = seq(from = minimum, to = maximum + classWidth, by = classWidth)
classLimits = cut(salaries, breaks = classBreaks)
frequencyTable = as.data.frame(transform(table(classLimits)))
cumulativeFrequency = cumsum(frequencyTable$Freq)
relativeFrequency = round(frequencyTable$Freq/sum(frequencyTable$Freq), 3)
cumulRelativeFreq = cumsum(relativeFrequency)
frequencyTableFinal = data.frame(frequencyTable, cumulativeFrequency, cumulativeFrequency, relativeFrequency, cumulRelativeFreq)
frequencyTableFinal
library(readxl)
library(knitr)
hist(salaries, breaks = 5, xlab = "Salaly Range in Thousands's of Dollars", main = "Histogram of Employees Salaries")
library(readxl)
library(knitr)
salariesAdjusted <- c(24,25,25,27,27,29,30,35,35,35,36,38,38,39,39,40,40,40,45,45,45,
45,47,52,52,52,58,59,59,61,61,67,68,68,68)
hist(salariesAdjusted, breaks = 5, xlab = "Salaly Range in Thousands's of Dollars Adjusted", main = "Histogram of Employees Salaries")
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
install.packages(c("cli", "xfun"))
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("cli")
install.packages("cli")
knitr::opts_chunk$set(echo = TRUE)
names(cars)
names(cars)
names(cars)
tails(cars)
tail(cars)
head(cars)
names(cars)
tail(cars)
tail(cars)
cat(summary(cars))
cat(summary(cars))
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
plot(pressure)
plot(pressure)
```{r pressure}
plot(pressure, main = "Im going to set an 18 year timere when your daughter is born")
plot(pressure)
plot(pressure, main = "Graph of Temp Vs. Pressure")
plot(pressure, main = "Distance allowed from school zone")
plot(pressure, main = "")
plot(pressure, main = "Graph of Temp Vs. Pressure", l)
plot(pressure, main = "Graph of Temp Vs. Pressure", "l")
plot(pressure, main = "Graph of Temp Vs. Pressure", type = "l")
plot(pressure, main = "Graph of Temp Vs. Pressure", type = "b")
?plot()
?plot
my_log <-file("Chapter-1 Exercises.txt") # Creating File log
sink(my_log, append = TRUE, type = "output") # Writing console output to log file
sink(my_log, append = TRUE, type = "message")
cat(readChar(rstudioapi::getSourceEditorContext()$path, # Writing currently opened R script to file
file.info(rstudioapi::getSourceEditorContext()$path)$size))
1 + 1
closeAllConnections() # Close connection to log file
save.image("C:/Users/gwmcc/OneDrive/Desktop/trial.RData")
load("C:/Users/gwmcc/OneDrive/Desktop/trial.RData")
1+1
save.image("C:/Users/gwmcc/Downloads/trial2.RData")
load("C:/Users/gwmcc/Downloads/trial2.RData")
load("C:/Users/gwmcc/Downloads/trial2.RData")
a<- 3
save.image("C:/Users/gwmcc/OneDrive/Documents/trial3.RData")
load("C:/Users/gwmcc/OneDrive/Documents/trial3.RData")
my_log <- file("my_log.txt")
sink(my_log, append = TRUE, type = "output")
sink(my_log, append = TRUE, type = "message")
cat(readChar(rstudioapi::getSourceEditorContext()$path,file.info(rstudioapi::getSourceEditorContext()$path)$size))
1 + 1
100: 130
closeAllConnections()
knitr::opts_chunk$set(echo = TRUE)
cars
?lm()
?lm()
y.var = cars$dist$
lm()
y.var = cars$dist
x.var = cars$speed
cars_regression_model = lm(y.var ~ x.var, data = cars)
View(cars_regression_model)
cars_regression_model
cars_regression_model
cars_regression_model()
cars_regression_model
cars_regression_model = lm(y.var ~ x.var, data = cars)
cars_regression_model
knitr::opts_chunk$set(echo = TRUE)
summary(cars_regression_model)
load("~/GitHub/Data-332/.RData")
load("~/GitHub/Data-332/.RData")
install.packages("fawaway")
## HW-Q 2:
(b)
## HW-Q 2:
## (b)
HDL <- mean(diabetes)
knitr::opts_chunk$set(echo = TRUE)
diabetes
cars
install.packages("faraway")
diabetes
data(diabetes)
data(diabetes)
library("faraway")
data(diabetes)
data(diabetes)
diabetes
library("faraway")
> library("faraway")
library("faraway")
library("faraway")
library("faraway")
diabetes
diabetes
diabetes
diabetes
mean_HDL <- mean(diabetes$hdl)
diabetes
mean_HDL <- mean(diabetes$hdl)
mean_HDL <- mean(diabetes$hdl)
mean_HDL
diabetes
?mean()
mean_HDL
data <- diabetes$hdl
data
diabetes
summary(diabetes)
mean_HDL <- mean(diabetes$hdl, na.rm = TRUE)
mean_HDL
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("faraway")
mean_HDL_females <- mean(diabetes["hdl", "gender" == "Female"])
mean_HDL_females
mean_HDL_females <- mean(diabetes["hdl", "gender" == "Female"], na.rm = TRUE)
mean_HDL_females
library("faraway")
faraway
faraway()
summary("faraway")
summary("faraway")
summary(faraway)
mean_HDL_females <- mean(subset(diabetes, gender = female)$hdl)
mean_HDL_females <- mean(subset(diabetes, gender = female)$hdl)
mean_HDL_females
mean_HDL_females <- mean(subset(diabetes, gender = female)$hdl, na.rm = TRUE)
mean_HDL_females
mean_HDL
mean_HDL
mean_HDL <- mean(diabetes$hdl, na.rm = TRUE)
mean_HDL
view("faraway")
View("faraway")
View(faraway)
View("faraway")
mean_HDL_females <- mean(subset(diabetes, gender == female)$hdl, na.rm = TRUE)
mean_HDL_females <- mean(subset(diabetes, gender == Female)$hdl, na.rm = TRUE)
library("faraway")
summary("faraway")
install.packages("faraway")
install.packages("faraway")
install.packages("faraway")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
summary("faraway")
summary("diabetes")
view("diabetes")
View("diabetes")
View(diabetes)
View(diabetes)
View("diabetes")
data <- diabetes
data <- faraway$diabetes
library("faraway")
View(diabetes)
library("faraway")
View("diabetes")
View(diabetes)
mean_HDL_females <- mean(subset(diabetes, gender == Female)$hdl, na.rm = TRUE)
mean_HDL_females <- mean(subset(diabetes, gender == female)$hdl, na.rm = TRUE)
mean_HDL_females <- mean(subset(diabetes, gender == "female")$hdl, na.rm = TRUE)
View(diabetes)
library("faraway")
?ggplot
ggplot2(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight) + geom_point(colour = 'red'))
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight) + geom_point(colour = 'red'))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
ggplot2(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight) + geom_point(colour = 'red'))
library("ggplot2")
ggplot2(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight) + geom_point(colour = 'red'))
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight) + geom_point(colour = 'red'))
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
library("faraway")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
library("geom_point")
library("ggplot2")
ggplot2(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
?ggplot2
library("ggplot")
?ggplot
?ggplot
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
install.packages("farver")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
Summary(diabetes)
summary(diabetes)
View(diabetes)
data <- diabetes["chol", "weight"]
View(data)
data <- diabetes[chol, weight]
View(data)
data <- diabetes[chol, weight]
ggplot(data = data, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
View(diabetes)
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$height, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red')
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol")
?ggplot + ylab("Weight")
ggplot(data = diabetes, aes(x = diabetes$chol, y = diabetes$weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weigth + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol())) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight, fill = weight + chol)) + geom_point() + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
ggplot(data = diabetes, aes(x = chol, y = weight)) + geom_point(colour = 'red') + ggtitle("Cholesterol Vs. Weight") + xlab("Cholesterol") + ylab("Weight")
library("faraway")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("faraway")
library("ggplot2")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male", y = "female"), ))
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = 9"female"))
library("cowplot")
library(cowplot)
install.packages("cowplot")
library("cowplot"")
library("cowplot")
library("cowplot")
library("cowplot")
("cowplot")
library("cowplot")
library("ggplot2")
library("faraway")
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = (gender == "female")))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = (gender == "male"), y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl))
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + gempoint()
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_point()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot()
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = gender, fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
male_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, color = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
male_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black", fill = gender)) + geom_boxplot(outlier.color = "black")
gender_hdl
gendere_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl + scale_fill_manual(values = "blue",
"Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = "blue", "Red")
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black") + scale_fill_manual(values = c("blue", "Red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red"))
gender_hdl
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", filled.contour(values = c("blue", "red")))
gender_hdl <- ggplot(data = diabetes, aes(x = gender, y = hdl, line = "black")) + geom_boxplot(outlier.color = "black", fill = (values = c("blue", "red")))
gender_hdl
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
ln(0)
mean(y, na.rm = TRUE)
y = c(0, 2, NA, 3, 4, 1, 9, 0)
mean(y, na.rm = TRUE)
x <-1:100; sum(log(x))
set.seed(42)
some_vector = rnorm(100)
?count()
count(some_vector > 1)
sum(some_vector > 1)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
sum_of_squares(x = a)
sum_of_sqaures <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares <- function(x){
sum <- x ;sum(x * x)
}
sum_of_squares(x = a)
sum_of_squares(x = c(c, d))
sum_of_squares(x = a+b)
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff(x = a, y = b)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
a = 1:10
b = 10:1
c = rep(1, times = 10)
d = 2 ^ (1:10)
rms.diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
rms_diff <- function(x, y) {
n <- max(length(x), length(y))
x <- rep(x, length.out = n)
y <- rep(y, length.out = n)
sqrt(sum((x - y)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python}
print("Hello World)
```
```{python}
print("Hello World")
```
print("Hello World)
print("Hello World")
```{python}
print("Hello World")
```{python}
print("Hello World")
```
quit
object_x
# creating random number from Normal PDF
object_x = rnorm(10)
object_x
length(object_x)
sum(object_x)
sum(object_x)
summing.objects.in.R(object_x)
summing.objects.in.R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing.objects.in.R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing_objects_in_R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", round(s, 4))
}
summing_objects_in_R(object_x)
We have created an object named  'object_x', and I want to see the result of this object at the end of this line here : 'r mean(object_x)'
knitr::opts_chunk$set(echo = TRUE)
mean(object_x)
example.data <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/example-data.csv")
View(example.data)
View(example.data)
View(example.data)
Auto <- read.csv("C:/Users/gwmcc/Downloads/Auto.csv")
View(Auto)
knitr::opts_chunk$set(echo = TRUE)
Auto <- read.csv("C:\Users\gwmcc\OneDrive\Desktop\Math 420\Auto.csv")
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
View(Auto)
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
names(Auto)
Auto.rdata = read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
row(Auto)
dim(Auto)
HorsePower <- Auto$horsepower
MilePreGallon <- Auto$mpg
?lm()
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR$coefficients
Model1_SLR
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
View(Model1_SLR)
had(SLR_Dataset, 6)
had(SLR_Dataset)
head(SLR_Dataset)
# ---- Creating a Final Model ----
Model2_SLR <- lm(MilePreGallon ~ HorsePower, data = SLR_Dataset)
Model2_SLR
summary(Model2_SLR)
x = Auto$horsepower
y = Auto$mpg
Model3_SLR <- lm(y ~x)
summary(Model3_SLR)
length(x)
length((y))
names(Model3_SLR)
residuals(Model3_SLR)
plot(Model3_SLR)
library(readxl)
library(readxl)
library(dplyr)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(tidyr)
install.packages(tidyr)
install.packages("tidyr")
library(tidyr)
library(tidyr)
library(ggplot2)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/In Class Examples")
df_truck <- read_excel('Data/NP_EX_1-2.xlxs')
