group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy_books)
View(tidy_books)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("bing")) %>%
count(Company, index = Complaint.ID, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("bing")) %>%
count(Company, index = Complaint.ID, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("nrc")) %>%
count(Company, index = Complaint.ID, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("nrc"), relationship = "many-to-many") %>%
count(Company, index = Complaint.ID, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(customer_complaints_sentiment)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(customer_complaints_sentiment)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(jane_austen_sentiment)
View(customer_complaints_sentiment)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(jane_austen_sentiment)
View(customer_complaints_sentiment)
View(jane_austen_sentiment)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(Company,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(customer_complaints_sentiment)
install.packages("Stargazer")
yes
install.packages("stargazer")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW/Data")
df <- read.csv("Data/Consumer_Complaints.csv")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW/Data")
df <- read.csv("Data/Consumer_Complaints.csv")
df <- read.csv("Consumer_Complaints.csv")
df <- df %>%
filter(Consumer.complaint.narrative != "")
get_sentiments("nrc")
get_sentiments("bing")
tidy_complaints <- df %>%
unnest_tokens(word, Consumer.complaint.narrative)
customer_complaints_sentiment <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(Company,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Company, ncol = 2, scales = "free_x")
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE)
View(customer_complaints_sentiment)
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Company, ncol = 2, scales = "free_x") +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Company, scales = "free") +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text = element_text(angle = 45, vjust = .5, hjust = 1))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text = element_text(angle = 90, vjust = .1, hjust = .25))
theme(axis.text = element_text(angle = 90)
theme(axis.text = element_text(angle = 90)
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text = element_text(angle = 90))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text = element_text(angle = 90, size = 5))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text = element_text(angle = 90, size = 3))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 6)) +  # Adjust the size as needed
facet_wrap(~ Company, scales = "free_x", nrow = 260)  # Adjust nrow as needed
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 6)) +  # Adjust the size as needed
facet_wrap(~ Company, scales = "free_x", nrow = 2600)  # Adjust nrow as needed
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 6)) +  # Adjust the size as needed
facet_wrap(~ Company, scales = "free_x", ncol = 2600)  # Adjust nrow as needed
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 6))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2)) +
facet_wrap(~ Company, nrow = 260)
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2))
ggplot(customer_complaints_sentiment, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2))
custoer_complaints_sentiment_sample <- sample(customer_complaints_sentiment, size = 50)
custoer_complaints_sentiment_sample <- sample(x = customer_complaints_sentiment, size = 50)
custoer_complaints_sentiment_sample <- sample(x = customer_complaints_sentiment, size = 50)
custoer_complaints_sentiment_sample <- sample.rows(x = customer_complaints_sentiment, size = 50)
custoer_complaints_sentiment_sample <- sample_n(x = customer_complaints_sentiment, size = 50)
custoer_complaints_sentiment_sample <- sample_n(customer_complaints_sentiment, size = 50)
customer_complaints_sentiment_sample <- sample_n(customer_complaints_sentiment, size = 50)
View(customer_complaints_sentiment_sample)
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 2))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))
customer_complaints_sentiment_sample <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5, v_just = -.05))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5, vjust = -.05))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5, vjust = -.5))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5, vjust = -.01))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5, vjust = -.001))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, size = 5))
ggplot(customer_complaints_sentiment_sample, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW/Pics")
ggsave("customer_complaints_sent_analysis.png")
ggsave("customer_complaints_sent_analysis.png", length = 7)
ggsave("customer_complaints_sent_analysis.png", width = 7)
ggsave("customer_complaints_sent_analysis.png", width = 6)
customer_complaints_sentiment_company <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(Company,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
View(df)
custoer_complaints_sentiment_product <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(Product,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(custoer_complaints_sentiment_product)
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))
customer_complaints_sentiment_product <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(Product,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))
View(custoer_complaints_sentiment_product)
ggsave("customer_complaints_sent_product_analysis.png", width = 6)
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score")
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score") +
title("Sentiment Score Per Product")
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score") +
tittle("Sentiment Score Per Product")
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score") +
ggtittle("Sentiment Score Per Product")
ggplot(customer_complaints_sentiment_product, aes(Product, sentiment, fill = Product)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score") +
ggtitle("Sentiment Score Per Product")
ggsave("customer_complaints_sent_product_analysis.png", width = 6)
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
customer_complaints_sentiment_sample_company <- sample_n(customer_complaints_sentiment, size = 50)
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentimnt Score Per Company")
ggplot(customer_complaints_sentiment_sample_company, aes(Company, sentiment, fill = Company)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5))+
ylab("Sentiment Score") +
ggtitle("Sentiment Score Per Company")
ggsave("customer_complaints_sent__company_analysis.png", width = 6)
customer_complaints_sentiment_state <- <- tidy_complaints %>%
customer_complaints_sentiment_state <- tidy_complaints %>%
inner_join(get_sentiments("bing"), relationship = "many-to-many") %>%
count(State,sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(customer_complaints_sentiment_state, aes(State, sentiment, fill = State)) +
geom_col(show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
ylab("Sentiment Score") +
ggtitle("Sentiment Score Per State")
ggsave("customer_complaints_sent_state_analysis.png", width = 6)
# Word Cloud
tidy_complaints %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW/Data")
saveRDS(sentiment_analysis_company, file = "customer_complaints_sentiment_company.rds")
saveRDS(customer_complaints_sentiment_company, file = "sentiment_analysis_company.rds")
saveRDS(customer_complaints_sentiment_sample_company, file = "sentiment_analysis_company.rds")
saveRDS(customer_complaints_sentiment_product, file = "sentiment_analysis_product.rds")
saveRDS(customer_complaints_sentiment_state, file = "sentiment_analysis_state.rds")
sentiment_analysis_company <- readRDS("C:/Users/gwmcc/Downloads/sentiment_analysis_company.rds")
View(sentiment_analysis_company)
library(ISLR2)
library(ISLR2)
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(ISLR2)
df_weekly <- Weekly
df_weekly <- Weekly
View(df_weekly)
View(df_weekly)
logistic_model_weekly <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df_weekly, family = binomial)
View(logistic_model_weekly)
summary(logistic_model_weekly)
predicted_direction <- ifelse(predict(logistic_model, type = "response") > 0.5, "Up", "Down")
predicted_direction <- ifelse(predict(logistic_model_weekly, type = "response") > 0.5, "Up", "Down")
predicted_direction <- ifelse(predict(logistic_model_weekly, type = "response") > 0.5, "Up", "Down")
actual_direction <- Weekly$Direction
conf_matrix <- table(actual_direction, predicted_direction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
predicted_direction <- ifelse(predict(logistic_model_weekly, type = "response") > 0.5, "Up", "Down")
actual_direction <- Weekly$Direction
conf_matrix <- table(actual_direction, predicted_direction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
train_data <- df_weekly[df_weekly$Year >= 1990 and df_weekly$Year <= 2008]
train_data <- df_weekly[df_weekly$Year >= 1990 && df_weekly$Year <= 2008]
View(train_data)
train_data <- df_weekly[df_weekly$Year >= 1990 & df_weekly$Year <= 2008]
train_data <- df_weekly[df_weekly$Year >= 1990 && df_weekly$Year <= 2008, ]
train_data <- df_weekly[(df_weekly$Year >= 1990 && df_weekly$Year <= 2008)]
train_data <- df_weekly[(df_weekly$Year <= 2008 && df_weekly$Year <= 2008)]
train_data <- df_weekly[(df_weekly$Year <= 2008 && df_weekly$Year <= 2008)]
train_data <- df_weekly[(as.numeric(df_weekly$Year) >= 1990 && as.numeric(df_weekly$Year) <= 2008)]
train_data <- df_weekly[df_weekly$Year >= 1990 & df_weekly$Year <= 2008, ]
View(train_data)
logistic_model_weekly_2 <- glm(Direction ~ Lag2, data = df_weekly, family = binomial)
predicted_direction_2 <- ifelse(predict(logistic_model_weekly_2, type = "response") > 0.5, "Up", "Down")
actual_direction <- train_data[df_weekly$Year >= 1990 & df_weekly$Year <= 2008, ]
actual_direction_2 <- train_data[df_weekly$Year >= 1990 & df_weekly$Year <= 2008, ]
actual_direction <- Weekly$Direction
conf_matrix <- table(actual_direction_2, predicted_direction_2)
train_data <- df_weekly[df_weekly$Year >= 1990 & df_weekly$Year <= 2008, ]
logistic_model_weekly_2 <- glm(Direction ~ Lag2, data = train_data, family = binomial)
predicted_direction_2 <- ifelse(predict(logistic_model_weekly_2, type = "response") > 0.5, "Up", "Down")
actual_direction_2 <- train_data[df_weekly$Year >= 1990 & df_weekly$Year <= 2008, ]
conf_matrix <- table(actual_direction_2, predicted_direction_2)
conf_matrix
conf_matrix_2 <- table(actual_direction_2, predicted_direction_2)
conf_matrix_2
actual_direction_2 <- train_data$Direction
conf_matrix_2 <- table(actual_direction_2, predicted_direction_2)
conf_matrix_2
accuracy_2 <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy_2
accuracy_2 <- sum(diag(conf_matrix_2)) / sum(conf_matrix_2)
accuracy_2
## Question 2:
## Question 2:
df_auto <- Auto
View(df_auto)
auto_mpg_mean <- mean(df_auto$mpg)
auto_mpg_median <- median(df_auto$mpg)
mpg01 <- ifelse(df_auto$mpg > auto_mpg_median)
mpg01 <- ifelse(df_auto$mpg > auto_mpg_median, 1, 0)
df_auto_combined <- rbind(df_auto, mpg01)
df_auto <- Auto
View(df_auto_combined)
df_auto$predicted <- mpg01
View(df_auto)
par(mfrow = c(3, 3))  # Set up a 3x3 grid of plots
for (col in names(Auto)[-9]) {
plot(Auto[[col]], Auto$mpg01, xlab = col, ylab = "mpg01", main = paste("Scatterplot of", col, "vs. mpg01"))
}
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trun(.6 * nrow(df_auto))
train_index <- sample(nrow(df_auto), trunc(nrow(df_auto) * .6))
head(default_id)
head(train_index)
train_data_auto <- df_auto[train_index, ]
test_data_auto <- df_auto[-train_index, ]
logistic_model_auto <- glm(mpg01 ~ year + cylinders, data = train_data_auto, family = binomial)
View(df_auto)
View(train_data_auto)
logistic_model_auto <- lm(mpg01 ~ year + cylinders, data = train_data_auto, family = binomial)
mpgo1_train <- mpg01[train_index, ]
mpgo1_train <- mpg01[train_index]
logistic_model_auto <- glm(mpgo1_train ~ year + cylinders, data = train_data_auto, family = binomial)
View(logistic_model_auto)
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
actual_mpg01 <- test_data_auto$mpg01
test_error <- mean(predicted_mpg01 != actual_mpg01)
test_error
actual_mpg01 <- test_data_auto$mpg01
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
actual_mpg01 <- test_data_auto$mpg01
View(df_auto_combined)
View(df_auto)
actual_mpg01 <- test_data_auto$predicted
test_error <- mean(predicted_mpg01 != actual_mpg01)
test_error
train_index <- sample(nrow(df_auto), trunc(nrow(df_auto) * .6))
train_data_auto <- df_auto[train_index, ]
test_data_auto <- df_auto[-train_index, ]
mpgo1_train <- mpg01[train_index]
logistic_model_auto <- glm(mpgo1_train ~ year + cylinders, data = train_data_auto, family = binomial)
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
actual_mpg01 <- test_data_auto$predicted
test_error <- mean(predicted_mpg01 != actual_mpg01)
test_error <- mean(predicted_mpg01 != actual_mpg01)
test_error
```
test_error
actual_mpg01 <- test_data_auto$predicted
actual_mpg01
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
predicted_mpg01
test_error <- mean(predicted_mpg01 != actual_mpg01)
test_error <- sum(predicted_mpg01 != actual_mpg01)
test_error <- mean(ifelse(predicted_mpg01 != actual_mpg01, 1, 0))
test_error <- mean(ifelse(predicted_mpg01 != actual_mpg01, 1, 0))
test_error <- mean(ifelse(predicted_mpg01 != actual_mpg01,0, 1))
test_error <- mean(ifelse(predicted_mpg01 - actual_mpg01 < .05 ,0, 1))
test_error <- mean(ifelse(predicted_mpg01 - actual_mpg01 < .05 ,1, 0))
test_error
Auto
mpg01 <- ifelse(df_auto > auto_mpg_median, 1, 0)
mpg01 <- ifelse(df_auto$mpg > auto_mpg_median, 1, 0)
df_auto$mpg01 <- mpg01
for (col in names(Auto)[-9]) {
plot(Auto[[col]], Auto$mpg01, xlab = col, ylab = "mpg01", main = paste("Scatterplot of", col, "vs. mpg01"))
}
for (col in names(Auto)[-9]) {
plot(Auto[[col]], df_auto$mpg01, xlab = col, ylab = "mpg01", main = paste("Scatterplot of", col, "vs. mpg01"))
}
for (col in names(df_auto)[-9]) {
plot(Auto[[col]], df_auto$mpg01, xlab = col, ylab = "mpg01", main = paste("Scatterplot of", col, "vs. mpg01"))
}
logistic_model_auto <- glm(mpgo1_train ~ weight + horsepower, data = train_data_auto, family = binomial)
logistic_model_auto <- glm(mpgo1_train ~ weight + horsepower, data = train_data_auto, family = binomial)
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
actual_mpg01 <- test_data_auto$predicted
test_error <- mean(ifelse(predicted_mpg01 - actual_mpg01 < .05 ,1, 0))
test_error
View(df_auto)
df_auto$predicted <- NA
View(df_auto)
df_auto <- df_auto[, -which(names(df_auto) == "predicted")]
View(df_auto)
for (col in names(df_auto)[-9]) {
plot(df_auto[[col]], df_auto$mpg01, xlab = col, ylab = "mpg01", main = paste("Scatterplot of", col, "vs. mpg01"))
}
train_index <- sample(nrow(df_auto), trunc(nrow(df_auto) * .6))
train_data_auto <- df_auto[train_index, ]
test_data_auto <- df_auto[-train_index, ]
mpgo1_train <- mpg01[train_index]
logistic_model_auto <- glm(mpgo1_train ~ weight + horsepower, data = train_data_auto, family = binomial)
predicted_mpg01 <- predict(logistic_model_auto, newdata = test_data_auto, type = "response")
predicted_mpg01
actual_mpg01 <- test_data_auto$predicted
actual_mpg01
actual_mpg01 <- test_data_auto$mpg01
actual_mpg01
test_error <- mean(ifelse(predicted_mpg01 - actual_mpg01 < .05 ,1, 0))
test_error
