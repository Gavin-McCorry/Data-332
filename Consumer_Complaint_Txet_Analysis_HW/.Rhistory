sqrt(sum((x - y)^2) / n)
}
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
reticulate::repl_python()
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python, reticulate = FALSEE}
print("Hello World)
```
```{python}
print("Hello World)
```
```{python}
print("Hello World")
```
print("Hello World)
print("Hello World")
```{python}
print("Hello World")
```{python}
print("Hello World")
```
quit
object_x
# creating random number from Normal PDF
object_x = rnorm(10)
object_x
length(object_x)
sum(object_x)
sum(object_x)
summing.objects.in.R(object_x)
summing.objects.in.R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing.objects.in.R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", s)
}
summing_objects_in_R(object_x)
summing_objects_in_R <- function(x){
s = sum(x)
cat("The sum of the input object is", round(s, 4))
}
summing_objects_in_R(object_x)
We have created an object named  'object_x', and I want to see the result of this object at the end of this line here : 'r mean(object_x)'
knitr::opts_chunk$set(echo = TRUE)
mean(object_x)
example.data <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/example-data.csv")
View(example.data)
View(example.data)
View(example.data)
Auto <- read.csv("C:/Users/gwmcc/Downloads/Auto.csv")
View(Auto)
knitr::opts_chunk$set(echo = TRUE)
Auto <- read.csv("C:\Users\gwmcc\OneDrive\Desktop\Math 420\Auto.csv")
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
View(Auto)
Auto <- read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
names(Auto)
Auto.rdata = read.csv("C:/Users/gwmcc/OneDrive/Desktop/Math 420/Auto.csv")
row(Auto)
dim(Auto)
HorsePower <- Auto$horsepower
MilePreGallon <- Auto$mpg
?lm()
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR
Model1_SLR <- lm(MilePreGallon ~ HorsePower, data = Auto)
Model1_SLR$coefficients
Model1_SLR
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
SLR_Dataset = data.frame(MilePreGallon, HorsePower)
View(Model1_SLR)
had(SLR_Dataset, 6)
had(SLR_Dataset)
head(SLR_Dataset)
# ---- Creating a Final Model ----
Model2_SLR <- lm(MilePreGallon ~ HorsePower, data = SLR_Dataset)
Model2_SLR
summary(Model2_SLR)
x = Auto$horsepower
y = Auto$mpg
Model3_SLR <- lm(y ~x)
summary(Model3_SLR)
length(x)
length((y))
names(Model3_SLR)
residuals(Model3_SLR)
plot(Model3_SLR)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages(plotly)
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
install.packages("plotly")
install.packages("plotly")
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
# install.packages("plotly")
# --- for piping shortcut: ctrl + shift +  M (for windows) / Cmd + shift + M (for Macs)
library(plotly)
model_RdTv = lm(Sales ~ Radio + TV, data = Advertising)
# Atomic Vectors
#Example
die <- c(1, 2, 3, 4, 5, 6)
die
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
# Atomic Vectors
# Example
die <- c(1, 2, 3, 4, 5, 6)
deck <- read.csv("C:/Users/gwmcc/Downloads/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/9629323-ee5dfc039fd581cb467cc69c226ea2524913c3d8/deck.csv")
View(deck)
knitr::opts_chunk$set(echo = TRUE)
head(deck)
write.csv(deck, file = cards.csv, row.names = FALSE)
write.csv(deck, file = "cards.csv", row.names = FALSE)
head(deck)
knitr::opts_chunk$set(echo = TRUE)
set.seed(11122288)
num_obs = nrow(iris) ## extractin the total row from the dataset
iris_inde = sample(num_obs, size = trunc(.6 * num_obs))
iris_index = sample(num_obs, size = trunc(.6 * num_obs))
num_obs = nrow(iris) ## extractin the total row from the dataset
iris_index = sample(num_obs, size = trunc(.6 * num_obs))
iris_train = iris[iris_index, ]
# Training and test data sets
iris_train = iris[iris_index, ]
iris_test = iris[-iris_index, ]
install.packages("nnet")
library(nnet)
multinom_logit_1 = multinom(formula = Species ~ .,
data = iris_train,
trace = F)
summary(multinom_logit_1)
### Extracting the mdoel formula/equation using `equatiomatic` package:
```{r}
library(equatiomatic)
extract_eq(mutlimultinom_logit_1,
coef_digits = 5,
use_coefs = T)
multinom_data.frame = data.frame(iris_train)
multinom_logit_2 = multinom(Species ~ . ,
data = mutlinom_data.frame,
trace = FALSE)
multinom_logit_2 = multinom(Species ~ . ,
data = multinom_data.frame,
trace = FALSE)
# Extracting the co-efficients only:
summary(multinom_logit_2)$coefficients
View(multinom_data.frame)
predict(multinom_logit_2, newdata = iris_train)
predict(multinom_logit_2, newdata = iris_test)
View(iris_test)
# Predicting from test dataset:
head(predict(multinom_logit_2, newdata = iris_test))
# Predicting from test dataset:
head(predict(multinom_logit_2, newdata = iris_test))
# Probablilites of the preedicted outcome:
head(predict(multinom_logit_2, newdata = iris_test, type = "prob"))
install.packages("devtools")
library(devtools)
library(devtools)
devtools::install_github("cardimoon/ggiraphExtra)
d
f
f
f
""
devtools::install_github("cardimoon/ggiraphExtra")
devtools::install_github("cardimoon/ggiraphExtra")
install.packages("rgl")
library(ggplot12)
library(ggplot2)
library(rgl)
library(car)
install.packages("car")
library(car)
library(reshape2)
install.packages("predict3d")
install.packages("predict3d")
knitr::opts_chunk$set(echo = TRUE)
library(predict3d)
library(devtools)
devtools::install_github("cardimoon/ggiraphExtra")
devtools::install_github("cardiomoon/ggiraphExtra")
devtools::install_github("cardiomoon/ggiraphExtra")
devtools::install_github("cardiomoon/ggiraphExtra", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
vec <- c(0, 0, 0, 0, 0, 0)
vec
vec[1] <- 1000
vec
vec <- c(0, 0, 0, 0, 0, 0)
vec
vec[1] <- 1000
vec
# replacing multiple values
vec[c(1, 3, 5)] <- c(1, 1, 1)
veec
vec
# crating new values
vec[7] <- 0
vec
deck <- read.csv("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Chapter-3/cards.csv")
deck
deck$new <- 1:52
head(deck)
# Can also remove variables
deck$new <- NULL
head(deck)
# singling out value of the aces
deck[c(13, 26, 39, 52)]
# singling out value of the aces
deck[c(13, 26, 39, 52), ]
# can just get the values
deck[c(13, 26, 39, 52)]
# can just get the values
deck$value[c(13, 26, 39, 52)]
# replacing ace value
deck$value[c(13, 26, 39, 52)] <- 14
head(deck, 13)
shuffle <- function(cards) {
random <- sample(c(1:52), size = 52)
cards[random,]
}
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
c(1, 2, 3, 4) %in% c(3, 4, 5)
sum(deck$face == "ace")
deck4 <- deck
deck4$value
deck4$value <- 0
# Assign a value of 1 to every card in dck4 that has a suit of harts
deck4$value[deck4$suit == "hearts"]
# Assign a value of 1 to every card in dck4 that has a suit of harts
deck4$value[deck4$suit == "hearts"] <- 1
heaad(deck4$value)
head(deck4$value)
deck4$value
deck4$value[deck4$suit == "hearts"]
queenSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4$vale[queenSpades] <- 13
deck4$value[queenSpades] <- 13
deck4[queenSpades, ]
deck4$vale[queenSpades] <- NULL
deck4$vale[queenSpades] <- NULL
deck4[queenSpades, ]
deck4 <- deck
deck4$value <- 0
# Assign a value of 1 to every card in dck4 that has a suit of harts
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value[deck4$suit == "hearts"]
queenSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4$value[queenSpades] <- 13
deck4[queenSpades, ]
deck5 <- deck
facecards <- deck5$face %in% c("king, "queen", "jack")
facecards <- deck5$face %in% c("king", "queen", "jack")
facecards
deck5[facecards, ]
deck5$value[facecards] <- 10
head(deck5, 13)
View(deck)
View(deck4)
deck5$value[deck5$suit == "ace"] <- 1
View(deck5)
head(deck5, 13)
deck5$value[deck5$face == "ace"] <- 1
View(deck5)
1 + NA
NA == 1
c(NA, 1:50)
# cant get mean regularly
mean(c(NA, 1:50))
# Use special parameters
mean(c(NA, 1:50), na.rm = TRUE)
# May want to identify if a value is NA
NA == NA
# Regular comparison oerators dont work so use is.na
is.na(NA)
deck5$value[deck5$face == "ace"] <- NA
head(deck5)
head(deck5, 13)
install.packages("tidytext")
get_sentements("afinn")
library(tidytext)
get_sentiments("afinn")
install.packages("textdata")
library(tidytext)
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
install.packages("bit")
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
install.packages("janeaustenr")
install.packages("janeaustenr")
install.packages("stringr")
library(janeaustenr)
library(dplyr)
library(dplyr)
library(strinr)
library(stringr)
library(stringr)
library(tidytext)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy_books)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
View(nrc_joy)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
View(tidy_books)
library(tidyr)
library(tidyr)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(jane_austen_sentiment)
library(ggplot2)
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/In-Class-Examples/Text Analysis")
ggsave("sentiment_analysis_graph.png", height = 10, width = 10)
ggsave("sentiment_analysis_graph.png", height = 12, width = 10)
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))
) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment,
values_from = n,
values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(afinn)
View(bing_and_nrc)
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
ggsave("three_sent_compare.png", width = 10)
ggsave("three_sent_compare.png", width = 6)
ggsave("three_sent_compare.png", width = 6, height = 5)
get_sentiments("nrc") %>%
filter(sentiment %in% c("positive", "negative")) %>%
count(sentiment)
get_sentiments("bing") %>%
count(sentiment)
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts
bing_word_counts %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
ggsave("word_contributions_graph.png", width = 5)
ggsave("word_contributions_graph.png", width = 7)
custom_stop_words <- bind_rows(tibble(word = c("miss"),
lexicon = c("custom")),
stop_words)
custom_stop_words
install.packages("wordcloud")
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(wordcloud)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
ggsave("word_cloud_1.png")
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
install.packages("reshape2")
library(reshape2)
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
library(tidytext)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(wordcloud)
library(reshape2)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW")
library(readxl)
consumer_complaints <- read.csv("Data/Consumer_Complaints.csv")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332/Consumer_Complaint_Txet_Analysis_HW")
consumer_complaints <- read.csv("Data/Consumer_Complaints.csv")
View(consumer_complaints)
df <- read.csv("Data/Consumer_Complaints.csv")
View(df)
df_pivot_complaints <- df %>%
group_by(Product, Timely.response.) %>%
summarize(count = n())
View(df_pivot_complaints)
View(df_pivot_complaints)
austen_books()
yuh <- austen_books()
View(yuh)
View(yuh)
View(df)
View(df)
df <- df %>%
filter(Consumer.complaint.narrative != "")
View(df)
# Transforming a book into a data set conating the book, word, chapter, and line
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy_books)
View(tidy_books)
View(yuh)
?cumsum()
tidy_complaints <- df %>%
group_by(Company, Complaint.ID) %>%
mutate(
line_number = row_number(),
word = cumsum(str_detect(Consumer.complaint.narrative,
ignore_case = TRUE))) %>%
ungroup()
